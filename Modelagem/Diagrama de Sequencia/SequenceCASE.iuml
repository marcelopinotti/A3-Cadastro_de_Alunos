@startuml
title Diagrama de Sequência - Funcionário Cadastra Novo Aluno

actor "Funcionário" as FuncionarioActor
participant "TelaCadastroAluno" as Tela
participant "ControladorFuncionario" as Controlador
participant "ServicoCadastroAluno" as Servico
participant "ValidadorCadastroAluno" as Validador
participant "RepositorioAluno" as Repositorio
database "Banco de Dados" as Banco

skinparam style strictuml
skinparam defaultFontName Segoe UI Semibold
skinparam defaultFontSize 16
skinparam actorBorderColor #004D40
skinparam actorBackgroundColor #A7FFEB
skinparam participantBorderColor #3E2723
skinparam participantBackgroundColor #FFE0B2
skinparam databaseBorderColor #1A237E
skinparam databaseBackgroundColor #C5CAE9

skinparam lifelineColor #4E342E
skinparam sequenceArrowColor #BF360C
skinparam sequenceArrowThickness 2.5
skinparam sequenceBoxBorderColor #616161 
skinparam sequenceBoxBackgroundColor #FAFAFA 
skinparam shadowing true
skinparam roundCorner 15

skinparam noteBackgroundColor #FFFFE0
skinparam noteBorderColor #B0A070
skinparam noteFontColor #333333
skinparam noteFontSize 14
skinparam noteTextAlignment left

skinparam Nodesep 120 
skinparam ParticipantPadding 30 
skinparam MaxMessageSize 220 

== Início do Processo de Cadastro ==
FuncionarioActor -> Tela : Pressiona botão "Cadastrar Novo Aluno"
activate Tela #80CBC4
note left of Tela
  Funcionário inicia interação
  acionando funcionalidade na tela.
end note
Tela --> FuncionarioActor : Exibe formulário de cadastro
deactivate Tela

FuncionarioActor -> Tela : Preenche dados do aluno e envia
activate Tela #80CBC4
Tela -> Controlador : solicitarCadastroAluno(dadosFormulario)
deactivate Tela
note right of Tela
  Tela coleta dados e
  envia para Controlador
  (orquestrador da ação).
end note
activate Controlador #FFCC80

Controlador -> Servico : processarCadastroAluno(dadosFormulario)
activate Servico #B39DDB
note right of Controlador
  Controlador delega
  a lógica de negócio
  para a camada de Serviço.
end note

Servico -> Validador : validarDadosCadastro(dadosFormulario)
activate Validador #F48FB1
note left of Servico
  Serviço solicita validação
  dos dados de entrada
  antes de prosseguir.
end note
Validador --> Servico : resultadoValidacao
deactivate Validador

alt dados válidos
    note over Servico #FFFFE0 : **Fluxo de Sucesso:**\nOs dados são válidos e\no cadastro prossegue.
    Servico -> Repositorio : criarAluno(dadosAlunoTratados)
    activate Repositorio #A5D6A7
    note left of Repositorio
      Repositório é o responsável
      pela persistência dos dados
      (ex: salvar o novo Aluno).
    end note

    Repositorio -> Banco : Salva dados do Aluno
    activate Banco #90CAF9
    note left of Banco
      Interação com o
      Banco de Dados para
      armazenar informações.
    end note
    Banco --> Repositorio : sucessoOperacaoBD
    deactivate Banco
    Repositorio --> Servico : alunoCriadoComSucesso(novoAluno)
    deactivate Repositorio

    Servico --> Controlador : operacaoConcluida(mensagemSucesso, novoAluno)
    deactivate Servico

    Controlador -> Tela : exibirMensagemSucesso("Aluno cadastrado com sucesso!")
    activate Tela #80CBC4
    Tela --> FuncionarioActor : Mostra mensagem de sucesso e atualiza interface
    deactivate Tela
    note left of Tela
      Funcionário recebe a
      confirmação visual do
      sucesso da operação.
    end note
else dados inválidos
    note over Servico #FFFFE0 : **Fluxo de Erro:**\nOs dados fornecidos\nsão inválidos.
    Servico -> Controlador : falhaNaValidacao(errosDeValidacao)
    deactivate Servico
    Controlador -> Tela : exibirMensagemErro(errosDeValidacao)
    activate Tela #EF9A9A
    Tela --> FuncionarioActor : Mostra mensagens de erro no formulário
    deactivate Tela
    note left of Tela
      Funcionário é informado
      sobre os erros para que
      possa corrigi-los.
    end note
end

Controlador --> FuncionarioActor
deactivate Controlador

@enduml
